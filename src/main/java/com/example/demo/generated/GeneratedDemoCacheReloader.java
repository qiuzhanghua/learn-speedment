package com.example.demo.generated;

import com.example.demo.app.app.actor.generated.GeneratedActorCacheHolder;
import com.example.demo.app.app.authors.generated.GeneratedAuthorsCacheHolder;
import com.example.demo.app.app.books.generated.GeneratedBooksCacheHolder;
import com.example.demo.app.app.film.generated.GeneratedFilmCacheHolder;
import com.example.demo.app.app.film_actor.generated.GeneratedFilmActorCacheHolder;
import com.example.demo.app.app.language.generated.GeneratedLanguageCacheHolder;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.enterprise.datastore.runtime.DataStoreHolder;
import com.speedment.enterprise.datastore.runtime.DataStoreReloader;
import com.speedment.enterprise.datastore.runtime.util.DataStoreHolderUtil;
import com.speedment.runtime.core.component.StreamSupplierComponent;

import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;

/**
 * A reloader that loads updates from a stream source and creates a new holder
 * for that state.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedDemoCacheReloader implements DataStoreReloader {
    
    @Override
    public DataStoreHolder reload(StreamSupplierComponent streamSupplier, ExecutorService executor) {
        final CompletableFuture<GeneratedActorCacheHolder> actorHolder          = GeneratedActorCacheHolder.reload(streamSupplier, executor);
        final CompletableFuture<GeneratedAuthorsCacheHolder> authorsHolder      = GeneratedAuthorsCacheHolder.reload(streamSupplier, executor);
        final CompletableFuture<GeneratedBooksCacheHolder> booksHolder          = GeneratedBooksCacheHolder.reload(streamSupplier, executor);
        final CompletableFuture<GeneratedFilmCacheHolder> filmHolder            = GeneratedFilmCacheHolder.reload(streamSupplier, executor);
        final CompletableFuture<GeneratedFilmActorCacheHolder> filmActorHolder  = GeneratedFilmActorCacheHolder.reload(streamSupplier, executor);
        final CompletableFuture<GeneratedLanguageCacheHolder> languageHolder    = GeneratedLanguageCacheHolder.reload(streamSupplier, executor);
        
        final DataStoreHolder holder;
        try {
            holder = new GeneratedDemoDataStoreHolder(
                actorHolder.get(),
                authorsHolder.get(),
                booksHolder.get(),
                filmHolder.get(),
                filmActorHolder.get(),
                languageHolder.get()
            );
        } catch (final ExecutionException | InterruptedException ex) {
            throw new RuntimeException("Error reloading caches.", ex);
        }
        
        DataStoreHolderUtil.decorateEntityStores(holder, executor);
        return holder;
    }
}