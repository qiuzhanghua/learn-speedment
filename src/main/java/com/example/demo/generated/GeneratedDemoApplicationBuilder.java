package com.example.demo.generated;

import com.example.demo.DemoApplication;
import com.example.demo.DemoApplicationBuilder;
import com.example.demo.DemoApplicationImpl;
import com.example.demo.DemoCacheReloader;
import com.example.demo.DemoInjectorProxy;
import com.example.demo.app.app.actor.ActorManagerImpl;
import com.example.demo.app.app.actor.ActorSqlAdapter;
import com.example.demo.app.app.authors.AuthorsManagerImpl;
import com.example.demo.app.app.authors.AuthorsSqlAdapter;
import com.example.demo.app.app.books.BooksManagerImpl;
import com.example.demo.app.app.books.BooksSqlAdapter;
import com.example.demo.app.app.film.FilmManagerImpl;
import com.example.demo.app.app.film.FilmSqlAdapter;
import com.example.demo.app.app.film_actor.FilmActorManagerImpl;
import com.example.demo.app.app.film_actor.FilmActorSqlAdapter;
import com.example.demo.app.app.language.LanguageManagerImpl;
import com.example.demo.app.app.language.LanguageSqlAdapter;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.injector.Injector;
import com.speedment.runtime.application.AbstractApplicationBuilder;
import com.speedment.runtime.connector.mysql.MySqlBundle;

/**
 * A generated base {@link
 * com.speedment.runtime.application.AbstractApplicationBuilder} class for the
 * {@link com.speedment.runtime.config.Project} named app.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedDemoApplicationBuilder extends AbstractApplicationBuilder<DemoApplication, DemoApplicationBuilder> {
    
    protected GeneratedDemoApplicationBuilder() {
        super(DemoApplicationImpl.class, GeneratedDemoMetadata.class);
        withManager(ActorManagerImpl.class);
        withManager(AuthorsManagerImpl.class);
        withManager(BooksManagerImpl.class);
        withManager(FilmManagerImpl.class);
        withManager(FilmActorManagerImpl.class);
        withManager(LanguageManagerImpl.class);
        withComponent(ActorSqlAdapter.class);
        withComponent(AuthorsSqlAdapter.class);
        withComponent(BooksSqlAdapter.class);
        withComponent(FilmSqlAdapter.class);
        withComponent(FilmActorSqlAdapter.class);
        withComponent(LanguageSqlAdapter.class);
        withBundle(MySqlBundle.class);
        withInjectorProxy(new DemoInjectorProxy());
        withComponent(DemoCacheReloader.class);
    }
    
    @Override
    public DemoApplication build(Injector injector) {
        return injector.getOrThrow(DemoApplication.class);
    }
}