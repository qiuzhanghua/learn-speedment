package com.example.demo.generated;

import com.example.demo.app.app.actor.Actor;
import com.example.demo.app.app.actor.generated.GeneratedActorCacheHolder;
import com.example.demo.app.app.authors.Authors;
import com.example.demo.app.app.authors.generated.GeneratedAuthorsCacheHolder;
import com.example.demo.app.app.books.Books;
import com.example.demo.app.app.books.generated.GeneratedBooksCacheHolder;
import com.example.demo.app.app.film.Film;
import com.example.demo.app.app.film.generated.GeneratedFilmCacheHolder;
import com.example.demo.app.app.film_actor.FilmActor;
import com.example.demo.app.app.film_actor.generated.GeneratedFilmActorCacheHolder;
import com.example.demo.app.app.language.Language;
import com.example.demo.app.app.language.generated.GeneratedLanguageCacheHolder;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.enterprise.datastore.runtime.DataStoreHolder;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStore;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStoreHolder;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache;
import com.speedment.enterprise.datastore.runtime.fieldcache.MultiFieldCache;
import com.speedment.enterprise.datastore.runtime.statistic.Statistics;
import com.speedment.enterprise.datastore.runtime.util.StatisticsUtil;
import com.speedment.runtime.config.identifier.ColumnIdentifier;

import java.util.Optional;
import java.util.stream.Stream;

import static java.util.Objects.requireNonNull;

/**
 * A holder class for the various caches that are used to speed up the project.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public final class GeneratedDemoDataStoreHolder implements DataStoreHolder {
    
    private final GeneratedActorCacheHolder actorHolder;
    private final GeneratedAuthorsCacheHolder authorsHolder;
    private final GeneratedBooksCacheHolder booksHolder;
    private final GeneratedFilmCacheHolder filmHolder;
    private final GeneratedFilmActorCacheHolder filmActorHolder;
    private final GeneratedLanguageCacheHolder languageHolder;
    
    public GeneratedDemoDataStoreHolder(
            GeneratedActorCacheHolder actorHolder,
            GeneratedAuthorsCacheHolder authorsHolder,
            GeneratedBooksCacheHolder booksHolder,
            GeneratedFilmCacheHolder filmHolder,
            GeneratedFilmActorCacheHolder filmActorHolder,
            GeneratedLanguageCacheHolder languageHolder) {
        this.actorHolder     = requireNonNull(actorHolder);
        this.authorsHolder   = requireNonNull(authorsHolder);
        this.booksHolder     = requireNonNull(booksHolder);
        this.filmHolder      = requireNonNull(filmHolder);
        this.filmActorHolder = requireNonNull(filmActorHolder);
        this.languageHolder  = requireNonNull(languageHolder);
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <ENTITY> EntityStore<ENTITY> getEntityStore(
            String dbmsName,
            String schemaName,
            String tableName) {
        switch (tableName) {
            case "actor"      : return (EntityStore<ENTITY>) actorHolder.getEntityStore();
            case "authors"    : return (EntityStore<ENTITY>) authorsHolder.getEntityStore();
            case "books"      : return (EntityStore<ENTITY>) booksHolder.getEntityStore();
            case "film"       : return (EntityStore<ENTITY>) filmHolder.getEntityStore();
            case "film_actor" : return (EntityStore<ENTITY>) filmActorHolder.getEntityStore();
            case "language"   : return (EntityStore<ENTITY>) languageHolder.getEntityStore();
            default : throw new UnsupportedOperationException(
                String.format("Could not find '%s' in database model.", tableName)
            );
        }
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <ENTITY, CACHE extends FieldCache<CACHE>> CACHE getFieldCache(ColumnIdentifier<ENTITY> columnId) {
        switch (columnId.getTableId()) {
            case "actor"      : return (CACHE) actorHolder.getFieldCache((ColumnIdentifier<Actor>) columnId);
            case "authors"    : return (CACHE) authorsHolder.getFieldCache((ColumnIdentifier<Authors>) columnId);
            case "books"      : return (CACHE) booksHolder.getFieldCache((ColumnIdentifier<Books>) columnId);
            case "film"       : return (CACHE) filmHolder.getFieldCache((ColumnIdentifier<Film>) columnId);
            case "film_actor" : return (CACHE) filmActorHolder.getFieldCache((ColumnIdentifier<FilmActor>) columnId);
            case "language"   : return (CACHE) languageHolder.getFieldCache((ColumnIdentifier<Language>) columnId);
            default : throw new UnsupportedOperationException(
                String.format("Could not find '%s' in database model.", columnId.getTableId())
            );
        }
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <ENTITY, T0, T1, CACHE extends MultiFieldCache<T0, T1, CACHE>> Optional<CACHE> getMultiFieldCache(ColumnIdentifier<ENTITY> firstColumnId, ColumnIdentifier<ENTITY> secondColumnId) {
        return Optional.empty(); // No multi-indexes are used in the project
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <ENTITY> boolean isHavingMultiFieldCache(ColumnIdentifier<ENTITY> columnId) {
        return false; // No multi-indexes are used in the project
    }
    
    @Override
    public void close() {
        holders().forEach(EntityStoreHolder::close);
    }
    
    @Override
    public Statistics getStatistics() {
        return StatisticsUtil.create(
            holders()
                .toArray(EntityStoreHolder[]::new)
        );
    }
    
    @Override
    public Stream<EntityStoreHolder<?>> holders() {
        return Stream.of(
            actorHolder,
            authorsHolder,
            booksHolder,
            filmHolder,
            filmActorHolder,
            languageHolder
        );
    }
}