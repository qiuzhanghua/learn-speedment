package com.example.demo.generated;

import com.example.demo.DemoApplication;
import com.example.demo.DemoApplicationBuilder;
import com.example.demo.app.app.actor.ActorManager;
import com.example.demo.app.app.authors.AuthorsManager;
import com.example.demo.app.app.books.BooksManager;
import com.example.demo.app.app.film.FilmManager;
import com.example.demo.app.app.film_actor.FilmActorManager;
import com.example.demo.app.app.language.LanguageManager;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.enterprise.datastore.runtime.DataStoreBundle;
import com.speedment.enterprise.datastore.runtime.DataStoreComponent;
import com.speedment.enterprise.plugins.json.JsonBundle;
import com.speedment.enterprise.plugins.json.JsonComponent;
import com.speedment.runtime.core.ApplicationBuilder;
import com.speedment.runtime.core.component.ProjectComponent;
import com.speedment.runtime.join.JoinBundle;
import com.speedment.runtime.join.JoinComponent;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.core.env.Environment;

/**
 * The spring configuration file
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public class GeneratedDemoConfiguration {
    
    protected static final String URL_PROPERTY = "spring.speedment.url";
    protected static final String HOST_PROPERTY = "spring.speedment.host";
    protected static final String PORT_PROPERTY = "spring.speedment.port";
    protected static final String USERNAME_PROPERTY = "spring.speedment.username";
    protected static final String PASSWORD_PROPERTY = "spring.speedment.password";
    protected static final String LICENSE_PROPERTY = "spring.speedment.license";
    protected static final String LOGGING_PROPERTY = "spring.speedment.logging";
    protected @Autowired Environment env;
    
    @Bean
    public DemoApplication getApplication() {
        return getApplicationBuilder().build();
    }
    
    public DemoApplicationBuilder getApplicationBuilder() {
        final DemoApplicationBuilder builder =
            new DemoApplicationBuilder()
                .withBundle(DataStoreBundle.class)
                .withBundle(JsonBundle.class)
                .withBundle(JoinBundle.class);
        
        if (env.containsProperty(URL_PROPERTY)) {
            builder.withConnectionUrl(env.getProperty(URL_PROPERTY));
        }
        
        if (env.containsProperty(HOST_PROPERTY)) {
            builder.withIpAddress(env.getProperty(HOST_PROPERTY));
        }
        
        if (env.containsProperty(PORT_PROPERTY)) {
            builder.withPort(Integer.parseInt(env.getProperty(PORT_PROPERTY)));
        }
        
        if (env.containsProperty(USERNAME_PROPERTY)) {
            builder.withUsername(env.getProperty(USERNAME_PROPERTY));
        }
        
        if (env.containsProperty(PASSWORD_PROPERTY)) {
            builder.withPassword(env.getProperty(PASSWORD_PROPERTY));
        }
        
        if (env.containsProperty(LICENSE_PROPERTY)) {
            builder.withParam("licenseKey", env.getProperty(LICENSE_PROPERTY));
        }
        
        if (env.containsProperty(LOGGING_PROPERTY)
        &&  Boolean.valueOf(env.getProperty(LOGGING_PROPERTY))) {
            builder
                .withLogging(ApplicationBuilder.LogType.STREAM)
                .withLogging(ApplicationBuilder.LogType.APPLICATION_BUILDER)
                .withLogging(ApplicationBuilder.LogType.CONNECTION)
                .withLogging(ApplicationBuilder.LogType.STREAM_OPTIMIZER);
        }
        
        return builder;
    }
    
    @Bean
    public ProjectComponent getProjectComponent(DemoApplication app) {
        return app.getOrThrow(ProjectComponent.class);
    }
    
    @Bean
    public JsonComponent getJsonComponent(DemoApplication app) {
        return app.getOrThrow(JsonComponent.class);
    }
    
    @Bean
    public DataStoreComponent getDataStoreComponent(DemoApplication app) {
        return app.getOrThrow(DataStoreComponent.class);
    }
    
    @Bean
    public JoinComponent getJoinComponent(DemoApplication app) {
        return app.getOrThrow(JoinComponent.class);
    }
    
    @Bean
    public ActorManager getActorManager(DemoApplication app) {
        return app.getOrThrow(ActorManager.class);
    }
    
    @Bean
    public AuthorsManager getAuthorsManager(DemoApplication app) {
        return app.getOrThrow(AuthorsManager.class);
    }
    
    @Bean
    public BooksManager getBooksManager(DemoApplication app) {
        return app.getOrThrow(BooksManager.class);
    }
    
    @Bean
    public FilmManager getFilmManager(DemoApplication app) {
        return app.getOrThrow(FilmManager.class);
    }
    
    @Bean
    public FilmActorManager getFilmActorManager(DemoApplication app) {
        return app.getOrThrow(FilmActorManager.class);
    }
    
    @Bean
    public LanguageManager getLanguageManager(DemoApplication app) {
        return app.getOrThrow(LanguageManager.class);
    }
}