package com.example.demo.app.app.authors.generated;

import com.example.demo.app.app.authors.Authors;
import com.example.demo.app.app.authors.AuthorsEntityStoreSerializerImpl;
import com.example.demo.app.app.authors.AuthorsManager;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.tuple.Tuple2;
import com.speedment.common.tuple.Tuples;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStore;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStoreHolder;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfLong;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache;
import com.speedment.enterprise.datastore.runtime.fieldcache.MultiFieldCache;
import com.speedment.enterprise.datastore.runtime.statistic.Statistics;
import com.speedment.enterprise.datastore.runtime.util.DataStoreHolderUtil;
import com.speedment.enterprise.datastore.runtime.util.StatisticsUtil;
import com.speedment.runtime.bulk.PersistOperation;
import com.speedment.runtime.bulk.RemoveOperation;
import com.speedment.runtime.bulk.UpdateOperation;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.ColumnLabel;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.StreamSupplierComponent;
import com.speedment.runtime.field.Field;
import com.speedment.runtime.field.trait.HasIdentifier;

import java.util.Arrays;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.stream.Stream;

import static java.util.Objects.requireNonNull;
import static java.util.stream.Collectors.toMap;
import static java.util.stream.Collectors.toSet;

/**
 * A holder class for the various caches that are used to speed up the {@link
 * AuthorsManager}.
 * 
 * Generated by
 * com.speedment.enterprise.datastore.generator.internal.code.GeneratedEntityCacheHolderTranslator
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public final class GeneratedAuthorsCacheHolder implements EntityStoreHolder<Authors> {
    
    private final EntityStore<Authors> entityStore;
    private final OfLong fieldIdCache;
    
    public GeneratedAuthorsCacheHolder(EntityStore<Authors> entityStore, OfLong fieldIdCache) {
        
        this.entityStore  = requireNonNull(entityStore);
        this.fieldIdCache = requireNonNull(fieldIdCache);
    }
    
    @Override
    public EntityStore<Authors> getEntityStore() {
        return entityStore;
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <CACHE extends FieldCache<CACHE>> CACHE getFieldCache(ColumnIdentifier<Authors> columnId) {
        if ("id".equals(columnId.getColumnId())) {
            return (CACHE) fieldIdCache;
        }
        
        throw new UnsupportedOperationException(
            String.format("Unknown column name '%s'.", columnId.getColumnId())
        );
    }
    
    @Override
    public boolean isHavingMultiFieldCache(ColumnIdentifier<Authors> columnId) {
        return false;
    }
    
    public static CompletableFuture<GeneratedAuthorsCacheHolder> reload(StreamSupplierComponent streamSupplier, ExecutorService executor) {
        return reload(DataStoreHolderUtil.buildEntityStore(
            streamSupplier,
            executor,
            AuthorsEntityStoreSerializerImpl::new,
            TableIdentifier.of("app", "app", "authors")
        ), executor);
    }
    
    @Override
    public EntityStoreHolder<Authors> recycleAndPersist(PersistOperation<Authors> persistOperation) {
        return wrapped().recycleAndPersist(persistOperation);
    }
    
    @Override
    public EntityStoreHolder<Authors> recycleAndRemove(RemoveOperation<Authors> removeOperation) {
        return wrapped().recycleAndRemove(removeOperation);
    }
    
    @Override
    public EntityStoreHolder<Authors> recycleAndUpdate(UpdateOperation<Authors> updateOperation) {
        return wrapped().recycleAndUpdate(updateOperation);
    }
    
    private EntityStoreHolder<Authors> wrapped() {
        // Use explicit type for Stream to improve compilation time.
        final Map<ColumnLabel, FieldCache<?>> fieldCaches = Stream.<Tuple2<HasIdentifier<Authors>, FieldCache<?>>>of(
            Tuples.of(Authors.ID,fieldIdCache)
        )
            .collect(toMap(t2 -> t2.get0().identifier().label(), Tuple2::get1));
        final Map<ColumnLabel,  Map<ColumnLabel, MultiFieldCache<?, ?, ?>>>  multiFieldCaches = createMultiCacheMap();
        final Set<ColumnIdentifier<Authors>> columnIdentifiers = Stream.<HasIdentifier<Authors>>of(
            Authors.ID
        )
            .map(HasIdentifier::identifier)
            .collect(toSet());
        return EntityStoreHolder.of(
            entityStore,
            fieldCaches,
            multiFieldCaches,
            columnIdentifiers
        );
    }
    
    public static CompletableFuture<GeneratedAuthorsCacheHolder> reload(CompletableFuture<EntityStore<Authors>> entityStoreFuture, ExecutorService executor) {
        final CompletableFuture<FieldCache.OfLong> fieldIdCacheFuture =
            DataStoreHolderUtil.buildLongCache(entityStoreFuture, executor, Authors.ID, FieldCache.DISTINCT);
        
        return entityStoreFuture.thenApplyAsync(entityStore -> {
            try {
                return new GeneratedAuthorsCacheHolder(
                    entityStore,
                    fieldIdCacheFuture.get()
                );
            } catch (final ExecutionException | InterruptedException ex) {
                throw new RuntimeException(ex);
            }
        });
    }
    
    @Override
    public void close() {
        entityStore.close();
        fieldIdCache.close();
    }
    
    @Override
    public Statistics getStatistics() {
        return StatisticsUtil.getStatistics(    
            this,
            entityStore.identifier(),
            Arrays.asList(
                Authors.Identifier.ID
            )
        
        );
    }
    
    private Map<ColumnLabel, Map<ColumnLabel, MultiFieldCache<?, ?, ?>>> createMultiCacheMap() {
        return Collections.emptyMap();
    }
}