package com.example.demo.app.app.books.generated;

import com.example.demo.app.app.books.Books;
import com.example.demo.app.app.books.BooksImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.SqlAdapter;
import com.speedment.runtime.core.db.SqlFunction;

import java.sql.ResultSet;
import java.sql.SQLException;

import static com.speedment.common.injector.State.RESOLVED;
import static com.speedment.runtime.core.util.ResultSetUtil.*;

/**
 * The generated Sql Adapter for a {@link com.example.demo.app.app.books.Books}
 * entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedBooksSqlAdapter implements SqlAdapter<Books> {
    
    private final TableIdentifier<Books> tableIdentifier;
    
    protected GeneratedBooksSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("app", "app", "books");
    }
    
    protected Books apply(ResultSet resultSet, int offset) throws SQLException {
        return createEntity()
            .setId(       getLong(resultSet, 1 + offset))
            .setAuthorId( getLong(resultSet, 2 + offset))
            ;
    }
    
    protected BooksImpl createEntity() {
        return new BooksImpl();
    }
    
    @Override
    public TableIdentifier<Books> identifier() {
        return tableIdentifier;
    }
    
    @Override
    public SqlFunction<ResultSet, Books> entityMapper() {
        return entityMapper(0);
    }
    
    @Override
    public SqlFunction<ResultSet, Books> entityMapper(int offset) {
        return rs -> apply(rs, offset);
    }
}