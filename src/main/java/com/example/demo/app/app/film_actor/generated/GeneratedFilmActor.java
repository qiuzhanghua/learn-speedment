package com.example.demo.app.app.film_actor.generated;

import com.example.demo.app.app.actor.Actor;
import com.example.demo.app.app.film.Film;
import com.example.demo.app.app.film_actor.FilmActor;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.enterprise.datastore.runtime.field.DatastoreFields;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.field.ShortForeignKeyField;
import com.speedment.runtime.typemapper.TypeMapper;

/**
 * The generated base for the {@link
 * com.example.demo.app.app.film_actor.FilmActor}-interface representing
 * entities of the {@code film_actor}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedFilmActor {
    
    /**
     * This Field corresponds to the {@link FilmActor} field that can be
     * obtained using the {@link FilmActor#getFilmId()} method.
     */
    ShortForeignKeyField<FilmActor, Short, Film> FILM_ID = DatastoreFields.createShortForeignKeyField(
        Identifier.FILM_ID,
        FilmActor::getFilmId,
        FilmActor::setFilmId,
        Film.FILM_ID,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link FilmActor} field that can be
     * obtained using the {@link FilmActor#getActorId()} method.
     */
    ShortForeignKeyField<FilmActor, Short, Actor> ACTOR_ID = DatastoreFields.createShortForeignKeyField(
        Identifier.ACTOR_ID,
        FilmActor::getActorId,
        FilmActor::setActorId,
        Actor.ACTOR_ID,
        TypeMapper.primitive(),
        false
    );
    
    /**
     * Returns the filmId of this FilmActor. The filmId field corresponds to the
     * database column app.app.film_actor.film_id.
     * 
     * @return the filmId of this FilmActor
     */
    short getFilmId();
    
    /**
     * Returns the actorId of this FilmActor. The actorId field corresponds to
     * the database column app.app.film_actor.actor_id.
     * 
     * @return the actorId of this FilmActor
     */
    short getActorId();
    
    /**
     * Sets the filmId of this FilmActor. The filmId field corresponds to the
     * database column app.app.film_actor.film_id.
     * 
     * @param filmId to set of this FilmActor
     * @return       this FilmActor instance
     */
    FilmActor setFilmId(short filmId);
    
    /**
     * Sets the actorId of this FilmActor. The actorId field corresponds to the
     * database column app.app.film_actor.actor_id.
     * 
     * @param actorId to set of this FilmActor
     * @return        this FilmActor instance
     */
    FilmActor setActorId(short actorId);
    
    /**
     * Queries the specified manager for the referenced Film. If no such Film
     * exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Film findFilmId(Manager<Film> foreignManager);
    
    /**
     * Queries the specified manager for the referenced Actor. If no such Actor
     * exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Actor findActorId(Manager<Actor> foreignManager);
    
    enum Identifier implements ColumnIdentifier<FilmActor> {
        
        FILM_ID  ("film_id"),
        ACTOR_ID ("actor_id");
        
        private final String columnId;
        private final TableIdentifier<FilmActor> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "app";
        }
        
        @Override
        public String getSchemaId() {
            return "app";
        }
        
        @Override
        public String getTableId() {
            return "film_actor";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<FilmActor> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}